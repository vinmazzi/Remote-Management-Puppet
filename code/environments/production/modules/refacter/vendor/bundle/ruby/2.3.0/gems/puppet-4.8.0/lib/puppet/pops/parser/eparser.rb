#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 870)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'76,78,298,-274,61,71,298,72,-283,298,460,342,459,396,169,301,-288,-286',
'146,264,286,127,301,299,21,20,127,299,397,123,299,52,-140,55,84,67,12',
'291,59,44,47,149,54,45,10,11,-274,170,62,19,287,-283,46,133,343,17,18',
'126,133,-288,-286,265,126,83,460,128,459,146,146,53,128,447,-142,43',
'79,-140,81,82,80,-143,464,60,49,68,69,63,64,65,66,56,149,149,58,76,78',
'70,448,61,71,87,72,447,129,130,131,132,507,129,130,131,132,447,-183',
'-183,127,-142,95,21,20,127,319,152,-143,320,52,-144,55,153,67,12,161',
'59,44,47,85,54,45,10,11,76,78,62,19,171,194,46,133,196,17,18,126,133',
'-186,-186,199,126,83,87,128,-187,-187,266,53,128,95,-145,43,79,-144',
'81,82,135,136,95,60,49,68,69,63,64,65,66,56,-183,-183,58,76,78,70,279',
'61,71,280,72,281,129,130,131,132,152,129,130,131,132,284,-188,-188,127',
'-145,285,21,20,127,135,136,-184,-184,52,289,55,313,67,12,314,59,44,47',
'161,54,45,10,11,-185,-185,62,19,-186,-186,46,133,317,17,18,126,133,-189',
'-189,317,126,83,321,128,-187,-187,87,53,128,-188,-188,43,79,95,81,82',
'298,-189,-189,60,49,68,69,63,64,65,66,56,95,301,58,76,78,70,95,61,71',
'299,72,95,129,130,131,132,340,129,130,131,132,277,276,332,127,277,276',
'21,20,127,277,276,277,276,52,348,55,369,67,12,377,59,44,47,370,54,45',
'10,11,298,372,62,19,323,322,46,133,376,17,18,126,133,301,334,335,126',
'83,381,128,383,299,387,53,128,389,301,43,79,392,81,82,393,298,405,60',
'49,68,69,63,64,65,66,56,379,406,58,76,78,70,407,61,71,298,72,408,129',
'130,131,132,411,129,130,131,132,289,301,415,127,417,392,21,20,127,299',
'-228,423,425,52,432,55,433,67,138,340,59,44,47,341,54,45,436,439,392',
'392,62,19,152,449,46,133,450,17,18,126,133,453,454,457,126,83,461,128',
'463,472,474,53,128,475,340,43,79,479,81,82,481,340,484,60,49,68,69,63',
'64,65,66,56,485,340,58,76,78,70,488,61,71,492,72,463,129,130,131,132',
'494,129,130,131,132,495,496,497,127,340,502,21,20,127,503,504,505,506',
'52,-273,55,515,67,138,516,59,44,47,517,54,45,519,520,521,372,62,19,',
',46,133,,17,18,126,133,,,,126,83,,128,,,,53,128,,,43,79,-273,81,82,',
',,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,129,130,131,132',
',129,130,131,132,,,,127,,,21,20,,,127,,,52,,55,,67,138,,59,44,47,,54',
'45,,,,,62,19,,,46,133,,17,18,126,,,133,,,83,126,128,,442,,53,,,128,43',
'79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,129',
'130,131,132,,,,129,130,131,132,,,,,21,20,,,76,78,,52,171,55,,67,12,',
'59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,169,53,,166',
',43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,83,58,76,78,70,,61,71,',
'72,170,79,,,115,,88,89,90,76,78,,,171,,,21,20,117,,120,,114,52,116,55',
',67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,119,,17,18,169,,,166,,,83',
'91,93,92,94,,53,,,,43,79,96,81,82,,,83,60,49,68,69,63,64,65,66,56,170',
'79,58,76,78,70,,61,71,,72,,,,,,,,,,76,78,,,171,,,21,20,145,,,,,52,,55',
',67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,169,,,166,,,83,76',
'78,,,171,53,,,,43,79,,81,82,,,83,60,49,68,69,63,64,65,66,56,170,79,58',
'76,78,70,,61,71,,72,,,,169,115,,166,,,,,,,,,,21,20,117,,120,,114,52',
'116,55,83,67,138,,59,44,47,,54,45,170,79,,,62,19,115,,46,119,,17,18',
',,,,,,83,117,,120,,114,53,116,,,43,79,96,81,82,,,,60,49,68,69,63,64',
'65,66,56,,119,58,76,78,70,115,61,71,,72,,,,,115,97,98,,,117,,120,96',
'114,,116,21,20,117,,120,,114,52,116,55,,67,138,,59,44,47,,54,45,119',
',,,62,19,,,46,119,,17,18,,,97,98,,,83,,,96,,,53,,,,43,79,,81,82,,,,60',
'49,68,69,63,64,65,66,56,,,58,76,78,70,115,61,71,,72,,,,,115,,,,,117',
',120,,114,,116,21,20,117,,120,,114,52,116,55,,67,138,,59,44,47,,54,45',
'119,,,,62,19,,,46,119,,17,18,,,97,98,,,83,,,96,,,53,,,,43,79,,81,82',
',,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,178,72,,,,,115,,',
',,,,,,,,,21,20,117,,120,,114,52,116,55,,67,12,,59,44,47,,54,45,10,11',
',,62,19,,,46,119,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,176,173',
'68,69,63,64,65,66,174,183,182,175,76,78,70,,61,71,185,72,,,,,115,,,',
',,,,,,,,21,20,117,,120,,114,52,116,55,,67,12,,59,44,47,,54,45,10,11',
',,62,19,,,46,119,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,176,173',
'68,69,63,64,65,66,174,183,182,175,76,78,70,,61,71,,72,187,,,,,,,,,,',
',,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,',
'17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,176,173,68,69,63,64,65,66',
'174,183,182,175,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53',
',,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,',
'198,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64',
'65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53',
',,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,',
'72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,',
',62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69',
'63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52',
',55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,',
',53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61',
'71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10',
'11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68',
'69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,',
',,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83',
',,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70',
',61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45',
'10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49',
'68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20',
',,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,',
',83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78',
'70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54',
'45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60',
'49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,',
',,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76',
'78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,216,234,226,235,67,228,237',
'229,44,214,,218,212,,,,,62,19,238,233,213,,,17,211,,,,,,,83,,,,,236',
'217,,,,43,79,,81,82,,,,230,215,231,232,221,222,223,224,227,239,,58,76',
'78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47',
',54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60',
'49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,',
',83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78',
'70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54',
'45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49',
'68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20',
',,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83',
',,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70',
',61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45',
',,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68',
'69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,',
',,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,',
',,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61',
'71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,',
',,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69',
'63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52',
',55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53',
',,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,',
'72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64',
'65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,',
'43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72',
',,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19',
',,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65',
'66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67',
'138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79',
',81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,',
',,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46',
',,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66',
'56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138',
',59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,',
',,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17',
'18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,',
'58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59',
'44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82',
',,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,',
',,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18',
',,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58',
'76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44',
'47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,',
',60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,',
',21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,',
',,,,,83,,,,,,53,,,261,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58',
'76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44',
'47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,',
',60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,',
',21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,',
',,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76',
'78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47',
',54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60',
'49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,',
',83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78',
'70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,303,,,,,52,,55,,67,12,,59,44,47',
',54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,',
',,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,311,,,,,,,,,,',
',,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,',
'17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56',
',,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59',
'44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,187,,,,,,',
',,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46',
',,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,176,173,68,69,63,64,65,66',
'174,183,182,175,76,78,70,,61,71,,72,,,341,,,,,,,,,,,,,,21,20,,,,,,52',
',55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53',
',,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,',
'72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64',
'65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,',
'43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72',
',,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19',
',,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65',
'66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67',
'138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79',
',81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,',
',,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,',
'46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65',
'66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67',
'138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79',
',81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,',
',,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46',
',,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66',
'56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12',
',59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79',
',81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,399,,',
',,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19',
',,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65',
'66,56,,,58,76,78,70,,61,71,,72,401,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53',
',,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,',
'72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64',
'65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53',
',,,43,79,,81,82,,,,176,173,68,69,63,64,65,66,174,183,182,175,76,78,70',
',61,71,,72,418,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54',
'45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,176',
'173,68,69,63,64,65,66,174,183,182,175,76,78,70,,61,71,,72,,,,,,,,,,',
',,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,',
',17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,176,173,68,69,63,64,65,66',
'174,183,182,175,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53',
',,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,',
'72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64',
'65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,',
'43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72',
',,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19',
',,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65',
'66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67',
'138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79',
',81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,',
',,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46',
',,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66',
'56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138',
',59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,452,,,,,,',
',,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46',
',,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66',
'56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138',
',59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,',
',,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,',
',17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56',
',,58,76,78,70,,61,71,,72,465,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138',
',59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,',
',,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,',
',17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56',
',,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59',
'44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,',
',,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17',
'18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,',
'58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59',
'44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,',
',,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17',
'18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,',
'58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59',
'44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,',
',,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17',
'18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,',
'58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59',
'44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82',
',,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,500,,,,,,,,,',
',,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,',
',17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56',
',,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59',
'44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,509,,,,,,',
',,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46',
',,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66',
'56,,,58,76,78,70,,61,71,,72,511,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67',
'12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43',
'79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,',
',,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19',
',,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65',
'66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67',
'138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79',
',81,82,,,,60,49,68,69,63,64,65,66,56,115,,58,,,70,,,,,,,111,106,117',
',120,,114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119,,,,113,112,,,99,100',
'102,101,104,105,,97,98,115,,304,,,96,,,,,,,111,106,117,,120,,114,,116',
',107,109,108,110,,,,,,,,,103,,,,,,,119,,,,113,112,,,99,100,102,101,104',
'105,,97,98,115,,305,,,96,,,,,,,111,106,117,,120,,114,,116,,107,109,108',
'110,,,,,,,,,103,,,,,,,119,,,,113,112,,,99,100,102,101,104,105,,97,98',
'115,,306,,,96,,,,,,,111,106,117,,120,,114,,116,,107,109,108,110,,,,',
',,,,103,,,,,,,119,,,,113,112,,115,99,100,102,101,104,105,,97,98,,,111',
'106,117,96,120,,114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119,,,103,113',
'112,,,99,100,102,101,104,105,,97,98,,,,,,96,115,,,,,,,,,,334,335,111',
'106,117,338,120,115,114,,116,,107,109,108,110,,,103,,,117,,120,,114',
',116,,,,119,,,,113,112,,,99,100,102,101,104,105,,97,98,119,,,115,,96',
',,,,102,101,115,,,97,98,117,,120,,114,96,116,,,117,,120,115,114,,116',
',103,,,,,,,,,117,119,120,,114,,116,,103,,119,102,101,,,,97,98,99,100',
'102,101,,96,,97,98,119,,,115,,96,,,99,100,102,101,,,,97,98,117,,120',
',114,96,116,,103,,115,,,,,,,103,,,,,,,117,,120,119,114,,116,,,,103,99',
'100,102,101,104,105,,97,98,,,,,,96,,119,,,,,,,,99,100,102,101,104,105',
',97,98,115,,,,,96,,,,,103,,,106,117,,120,115,114,,116,,107,,,,,,,,106',
'117,,120,103,114,,116,,107,,119,,,,,,,,99,100,102,101,104,105,,97,98',
'119,,,,,96,,115,99,100,102,101,104,105,,97,98,,,,106,117,96,120,115',
'114,,116,,107,,,,,103,,,106,117,,120,,114,,116,,107,,119,,,103,,,,,99',
'100,102,101,104,105,,97,98,119,,,,,96,,115,99,100,102,101,104,105,,97',
'98,,,111,106,117,96,120,,114,,116,,107,109,108,110,,103,,,,,,,,,,,,',
',119,,,103,,,,115,99,100,102,101,104,105,,97,98,,,111,106,117,96,120',
',114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119,,,103,,112,,,99,100,102',
'101,104,105,115,97,98,,,344,,,96,,,,111,106,117,,120,,114,,116,,107',
'109,108,110,,,,,,,,,,,,103,,,,119,,,,113,112,,115,99,100,102,101,104',
'105,,97,98,,,111,106,117,96,120,,114,,116,,107,109,108,110,,,,,,,,,',
',,,,,,119,,,103,113,112,,115,99,100,102,101,104,105,,97,98,,,111,106',
'117,96,120,,114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119,,,103,113,112',
',,99,100,102,101,104,105,115,97,98,,,,,,96,,,,111,106,117,373,120,,114',
',116,,107,109,108,110,,,,,,,,,,,,103,,,,119,,,,113,112,,115,99,100,102',
'101,104,105,,97,98,,,111,106,117,96,120,,114,,116,,107,109,108,110,',
',,,,,,,,,,,,,,119,,,103,113,112,,115,99,100,102,101,104,105,,97,98,',
',111,106,117,96,120,,114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119,,',
'103,113,112,,115,99,100,102,101,104,105,,97,98,,,111,106,117,96,120',
',114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119,,,103,113,112,,115,99',
'100,102,101,104,105,,97,98,,,111,106,117,96,120,,114,,116,,107,109,108',
'110,,,,,,,,,,,,,,,,119,,,103,113,112,,115,99,100,102,101,104,105,,97',
'98,,,111,106,117,96,120,,114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119',
',,103,113,112,,115,99,100,102,101,104,105,,97,98,,,111,106,117,96,120',
',114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119,,,103,113,112,,115,99',
'100,102,101,104,105,,97,98,,,111,106,117,96,120,,114,,116,,107,109,108',
'110,,,,,,,,,,,,,,,,119,,,103,113,112,,,99,100,102,101,104,105,,97,98',
',360,234,359,235,96,357,237,361,,350,,356,358,,,,,,,238,233,362,,,,355',
',,,,,,,103,,,,236,363,,,,,,,,,,,,366,364,367,365,351,352,353,354,368',
'239,360,234,359,235,,357,237,361,,350,,356,358,,,,,,,238,233,362,,,',
'355,,,,,,,,,,,,236,363,,,,,,,,,,,,366,364,367,365,351,352,353,354,368',
'239,360,234,359,235,,357,237,361,,350,,356,358,,,,,,,238,233,362,,,',
'355,,,,,,,,,,,,236,363,,,,,,,,,,,,366,364,367,365,351,352,353,354,368',
'239,360,234,359,235,,357,237,361,,350,,356,358,,,,,,,238,233,362,,,',
'355,,,,,,,,,,,,236,363,,,,,,,,,,,,366,364,367,365,351,352,353,354,368',
'239,360,234,359,235,,357,237,361,,350,,356,358,,,,,,,238,233,362,,,',
'355,,,,,,,,,,,,236,363,,,,,,,,,,,,366,364,367,365,351,352,353,354,368',
'239,360,234,359,235,,357,237,361,,350,,356,358,,,,,,,238,233,362,,,',
'355,,,,,,,,,,,,236,363,,,,,,,,,,,,366,364,367,365,351,352,353,354,368',
'239' ]
        racc_action_table = arr = ::Array.new(10470, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,152,212,0,0,300,0,213,392,399,225,399,302,314,152,231,232,49,117',
'149,55,392,152,0,0,12,300,302,12,392,0,214,0,1,0,0,152,0,0,0,49,0,0',
'0,0,212,314,0,0,149,213,0,55,225,0,0,55,12,231,232,117,12,0,457,55,457',
'173,215,0,12,402,221,0,0,214,0,0,0,222,402,0,0,0,0,0,0,0,0,0,173,215',
'0,4,4,0,384,4,4,5,4,384,55,55,55,55,489,12,12,12,12,489,214,214,56,221',
'8,4,4,60,186,50,222,186,4,223,4,51,4,4,58,4,4,4,4,4,4,4,4,194,194,4',
'4,194,79,4,56,80,4,4,56,60,221,221,84,60,4,86,56,222,222,118,4,60,121',
'224,4,4,223,4,4,16,16,122,4,4,4,4,4,4,4,4,4,47,47,4,10,10,4,141,10,10',
'142,10,144,56,56,56,56,145,60,60,60,60,147,223,223,134,224,148,10,10',
'138,57,57,61,61,10,151,10,162,10,10,164,10,10,10,175,10,10,10,10,62',
'62,10,10,63,63,10,134,177,10,10,134,138,224,224,184,138,10,189,134,64',
'64,200,10,138,65,65,10,10,205,10,10,196,66,66,10,10,10,10,10,10,10,10',
'10,206,196,10,11,11,10,207,11,11,196,11,208,134,134,134,134,210,138',
'138,138,138,124,124,196,160,158,158,11,11,174,159,159,172,172,11,263',
'11,268,11,11,276,11,11,11,270,11,11,11,11,276,271,11,11,191,191,11,160',
'274,11,11,160,174,276,423,423,174,11,278,160,282,276,287,11,174,288',
'289,11,11,292,11,11,298,299,307,11,11,11,11,11,11,11,11,11,277,308,11',
'17,17,11,309,17,17,277,17,310,160,160,160,160,312,174,174,174,174,315',
'277,316,176,318,331,17,17,226,277,336,337,339,17,345,17,347,17,17,349',
'17,17,17,355,17,17,371,374,378,380,17,17,383,386,17,176,387,17,17,176',
'226,390,391,398,226,17,400,176,401,409,414,17,226,422,424,17,17,431',
'17,17,435,438,443,17,17,17,17,17,17,17,17,17,444,445,17,18,18,17,451',
'18,18,460,18,461,176,176,176,176,463,226,226,226,226,464,467,470,227',
'471,477,18,18,228,478,483,486,487,18,228,18,498,18,18,499,18,18,18,501',
'18,18,508,510,512,518,18,18,,,18,227,,18,18,227,228,,,,228,18,,227,',
',,18,228,,,18,18,228,18,18,,,,18,18,18,18,18,18,18,18,18,,,18,19,19',
'18,,19,19,,19,,227,227,227,227,,228,228,228,228,,,,230,,,19,19,,,376',
',,19,,19,,19,19,,19,19,19,,19,19,,,,,19,19,,,19,230,,19,19,230,,,376',
',,19,376,230,,376,,19,,,376,19,19,,19,19,,,,19,19,19,19,19,19,19,19',
'19,,,19,20,20,19,,20,20,,20,,230,230,230,230,,,,376,376,376,376,,,,',
'20,20,,,59,59,,20,59,20,,20,20,,20,20,20,,20,20,20,20,,,20,20,,,20,',
',20,20,,,,,,,20,,,,,59,20,,59,,20,20,,20,20,,,,20,20,20,20,20,20,20',
'20,20,,59,20,21,21,20,,21,21,,21,59,59,,,241,,7,7,7,229,229,,,229,,',
'21,21,241,,241,,241,21,241,21,,21,21,,21,21,21,,21,21,21,21,,,21,21',
',,21,241,,21,21,229,,,229,,,21,7,7,7,7,,21,,,,21,21,241,21,21,,,229',
'21,21,21,21,21,21,21,21,21,229,229,21,48,48,21,,48,48,,48,,,,,,,,,,313',
'313,,,313,,,48,48,48,,,,,48,,48,,48,48,,48,48,48,,48,48,48,48,,,48,48',
',,48,,,48,48,313,,,313,,,48,411,411,,,411,48,,,,48,48,,48,48,,,313,48',
'48,48,48,48,48,48,48,48,313,313,48,52,52,48,,52,52,,52,,,,411,242,,411',
',,,,,,,,,52,52,242,,242,,242,52,242,52,411,52,52,,52,52,52,,52,52,411',
'411,,,52,52,245,,52,242,,52,52,,,,,,,52,245,,245,,245,52,245,,,52,52',
'242,52,52,,,,52,52,52,52,52,52,52,52,52,,245,52,53,53,52,246,53,53,',
'53,,,,,137,245,245,,,246,,246,245,246,,246,53,53,137,,137,,137,53,137',
'53,,53,53,,53,53,53,,53,53,246,,,,53,53,,,53,137,,53,53,,,246,246,,',
'53,,,246,,,53,,,,53,53,,53,53,,,,53,53,53,53,53,53,53,53,53,,,53,54',
'54,53,247,54,54,,54,,,,,139,,,,,247,,247,,247,,247,54,54,139,,139,,139',
'54,139,54,,54,54,,54,54,54,,54,54,247,,,,54,54,,,54,139,,54,54,,,247',
'247,,,54,,,247,,,54,,,,54,54,,54,54,,,,54,54,54,54,54,54,54,54,54,,',
'54,70,70,54,,70,70,70,70,,,,,140,,,,,,,,,,,,70,70,140,,140,,140,70,140',
'70,,70,70,,70,70,70,,70,70,70,70,,,70,70,,,70,140,,70,70,,,,,,,70,,',
',,,70,,,,70,70,,70,70,,,,70,70,70,70,70,70,70,70,70,70,70,70,71,71,70',
',71,71,71,71,,,,,240,,,,,,,,,,,,71,71,240,,240,,240,71,240,71,,71,71',
',71,71,71,,71,71,71,71,,,71,71,,,71,240,,71,71,,,,,,,71,,,,,,71,,,,71',
'71,,71,71,,,,71,71,71,71,71,71,71,71,71,71,71,71,72,72,71,,72,72,,72',
'72,,,,,,,,,,,,,,,,72,72,,,,,,72,,72,,72,72,,72,72,72,,72,72,72,72,,',
'72,72,,,72,,,72,72,,,,,,,72,,,,,,72,,,,72,72,,72,72,,,,72,72,72,72,72',
'72,72,72,72,72,72,72,77,77,72,,77,77,,77,,,,,,,,,,,,,,,,,77,77,,,,,',
'77,,77,,77,77,,77,77,77,,77,77,77,77,,,77,77,,,77,,,77,77,,,,,,,77,',
',,,,77,,,,77,77,,77,77,,,,77,77,77,77,77,77,77,77,77,,,77,82,82,77,',
'82,82,,82,,,,,,,,,,,,,,,,,82,82,,,,,,82,,82,,82,82,,82,82,82,,82,82',
',,,,82,82,,,82,,,82,82,,,,,,,82,,,,,,82,,,,82,82,,82,82,,,,82,82,82',
'82,82,82,82,82,82,,,82,85,85,82,,85,85,,85,,,,,,,,,,,,,,,,,85,85,,,',
',,85,,85,,85,85,,85,85,85,,85,85,85,85,,,85,85,,,85,,,85,85,,,,,,,85',
',,,,,85,,,,85,85,,85,85,,,,85,85,85,85,85,85,85,85,85,,,85,87,87,85',
',87,87,,87,,,,,,,,,,,,,,,,,87,87,,,,,,87,,87,,87,87,,87,87,87,,87,87',
'87,87,,,87,87,,,87,,,87,87,,,,,,,87,,,,,,87,,,,87,87,,87,87,,,,87,87',
'87,87,87,87,87,87,87,,,87,88,88,87,,88,88,,88,,,,,,,,,,,,,,,,,88,88',
',,,,,88,,88,,88,88,,88,88,88,,88,88,88,88,,,88,88,,,88,,,88,88,,,,,',
',88,,,,,,88,,,,88,88,,88,88,,,,88,88,88,88,88,88,88,88,88,,,88,89,89',
'88,,89,89,,89,,,,,,,,,,,,,,,,,89,89,,,,,,89,,89,,89,89,,89,89,89,,89',
'89,89,89,,,89,89,,,89,,,89,89,,,,,,,89,,,,,,89,,,,89,89,,89,89,,,,89',
'89,89,89,89,89,89,89,89,,,89,90,90,89,,90,90,,90,,,,,,,,,,,,,,,,,90',
'90,,,,,,90,,90,,90,90,,90,90,90,,90,90,90,90,,,90,90,,,90,,,90,90,,',
',,,,90,,,,,,90,,,,90,90,,90,90,,,,90,90,90,90,90,90,90,90,90,,,90,91',
'91,90,,91,91,,91,,,,,,,,,,,,,,,,,91,91,,,,,,91,,91,,91,91,,91,91,91',
',91,91,91,91,,,91,91,,,91,,,91,91,,,,,,,91,,,,,,91,,,,91,91,,91,91,',
',,91,91,91,91,91,91,91,91,91,,,91,92,92,91,,92,92,,92,,,,,,,,,,,,,,',
',,92,92,,,,,,92,,92,,92,92,,92,92,92,,92,92,92,92,,,92,92,,,92,,,92',
'92,,,,,,,92,,,,,,92,,,,92,92,,92,92,,,,92,92,92,92,92,92,92,92,92,,',
'92,93,93,92,,93,93,,93,,,,,,,,,,,,,,,,,93,93,,,,,,93,,93,,93,93,,93',
'93,93,,93,93,93,93,,,93,93,,,93,,,93,93,,,,,,,93,,,,,,93,,,,93,93,,93',
'93,,,,93,93,93,93,93,93,93,93,93,,,93,94,94,93,,94,94,,94,,,,,,,,,,',
',,,,,,94,94,,,,,,94,,94,,94,94,,94,94,94,,94,94,94,94,,,94,94,,,94,',
',94,94,,,,,,,94,,,,,,94,,,,94,94,,94,94,,,,94,94,94,94,94,94,94,94,94',
',,94,95,95,94,,95,95,,95,,,,,,,,,,,,,,,,,95,95,,,,,,95,95,95,95,95,95',
'95,95,95,95,,95,95,,,,,95,95,95,95,95,,,95,95,,,,,,,95,,,,,95,95,,,',
'95,95,,95,95,,,,95,95,95,95,95,95,95,95,95,95,,95,96,96,95,,96,96,,96',
',,,,,,,,,,,,,,,,96,96,,,,,,96,,96,,96,96,,96,96,96,,96,96,,,,,96,96',
',,96,,,96,96,,,,,,,96,,,,,,96,,,,96,96,,96,96,,,,96,96,96,96,96,96,96',
'96,96,,,96,97,97,96,,97,97,,97,,,,,,,,,,,,,,,,,97,97,,,,,,97,,97,,97',
'97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97,,,,,,,97,,,,,,97,,,,97,97',
',97,97,,,,97,97,97,97,97,97,97,97,97,,,97,98,98,97,,98,98,,98,,,,,,',
',,,,,,,,,,98,98,,,,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,',
',98,98,,,,,,,98,,,,,,98,,,,98,98,,98,98,,,,98,98,98,98,98,98,98,98,98',
',,98,99,99,98,,99,99,,99,,,,,,,,,,,,,,,,,99,99,,,,,,99,,99,,99,99,,99',
'99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,,,99,,,,,,99,,,,99,99,,99,99',
',,,99,99,99,99,99,99,99,99,99,,,99,100,100,99,,100,100,,100,,,,,,,,',
',,,,,,,,100,100,,,,,,100,,100,,100,100,,100,100,100,,100,100,,,,,100',
'100,,,100,,,100,100,,,,,,,100,,,,,,100,,,,100,100,,100,100,,,,100,100',
'100,100,100,100,100,100,100,,,100,101,101,100,,101,101,,101,,,,,,,,',
',,,,,,,,101,101,,,,,,101,,101,,101,101,,101,101,101,,101,101,,,,,101',
'101,,,101,,,101,101,,,,,,,101,,,,,,101,,,,101,101,,101,101,,,,101,101',
'101,101,101,101,101,101,101,,,101,102,102,101,,102,102,,102,,,,,,,,',
',,,,,,,,102,102,,,,,,102,,102,,102,102,,102,102,102,,102,102,,,,,102',
'102,,,102,,,102,102,,,,,,,102,,,,,,102,,,,102,102,,102,102,,,,102,102',
'102,102,102,102,102,102,102,,,102,103,103,102,,103,103,,103,,,,,,,,',
',,,,,,,,103,103,,,,,,103,,103,,103,103,,103,103,103,,103,103,,,,,103',
'103,,,103,,,103,103,,,,,,,103,,,,,,103,,,,103,103,,103,103,,,,103,103',
'103,103,103,103,103,103,103,,,103,104,104,103,,104,104,,104,,,,,,,,',
',,,,,,,,104,104,,,,,,104,,104,,104,104,,104,104,104,,104,104,,,,,104',
'104,,,104,,,104,104,,,,,,,104,,,,,,104,,,,104,104,,104,104,,,,104,104',
'104,104,104,104,104,104,104,,,104,105,105,104,,105,105,,105,,,,,,,,',
',,,,,,,,105,105,,,,,,105,,105,,105,105,,105,105,105,,105,105,,,,,105',
'105,,,105,,,105,105,,,,,,,105,,,,,,105,,,,105,105,,105,105,,,,105,105',
'105,105,105,105,105,105,105,,,105,106,106,105,,106,106,,106,,,,,,,,',
',,,,,,,,106,106,,,,,,106,,106,,106,106,,106,106,106,,106,106,,,,,106',
'106,,,106,,,106,106,,,,,,,106,,,,,,106,,,,106,106,,106,106,,,,106,106',
'106,106,106,106,106,106,106,,,106,107,107,106,,107,107,,107,,,,,,,,',
',,,,,,,,107,107,,,,,,107,,107,,107,107,,107,107,107,,107,107,,,,,107',
'107,,,107,,,107,107,,,,,,,107,,,,,,107,,,,107,107,,107,107,,,,107,107',
'107,107,107,107,107,107,107,,,107,108,108,107,,108,108,,108,,,,,,,,',
',,,,,,,,108,108,,,,,,108,,108,,108,108,,108,108,108,,108,108,,,,,108',
'108,,,108,,,108,108,,,,,,,108,,,,,,108,,,,108,108,,108,108,,,,108,108',
'108,108,108,108,108,108,108,,,108,109,109,108,,109,109,,109,,,,,,,,',
',,,,,,,,109,109,,,,,,109,,109,,109,109,,109,109,109,,109,109,,,,,109',
'109,,,109,,,109,109,,,,,,,109,,,,,,109,,,,109,109,,109,109,,,,109,109',
'109,109,109,109,109,109,109,,,109,110,110,109,,110,110,,110,,,,,,,,',
',,,,,,,,110,110,,,,,,110,,110,,110,110,,110,110,110,,110,110,,,,,110',
'110,,,110,,,110,110,,,,,,,110,,,,,,110,,,,110,110,,110,110,,,,110,110',
'110,110,110,110,110,110,110,,,110,111,111,110,,111,111,,111,,,,,,,,',
',,,,,,,,111,111,,,,,,111,,111,,111,111,,111,111,111,,111,111,,,,,111',
'111,,,111,,,111,111,,,,,,,111,,,,,,111,,,,111,111,,111,111,,,,111,111',
'111,111,111,111,111,111,111,,,111,112,112,111,,112,112,,112,,,,,,,,',
',,,,,,,,112,112,,,,,,112,,112,,112,112,,112,112,112,,112,112,,,,,112',
'112,,,112,,,112,112,,,,,,,112,,,,,,112,,,,112,112,,112,112,,,,112,112',
'112,112,112,112,112,112,112,,,112,113,113,112,,113,113,,113,,,,,,,,',
',,,,,,,,113,113,,,,,,113,,113,,113,113,,113,113,113,,113,113,,,,,113',
'113,,,113,,,113,113,,,,,,,113,,,,,,113,,,,113,113,,113,113,,,,113,113',
'113,113,113,113,113,113,113,,,113,114,114,113,,114,114,,114,,,,,,,,',
',,,,,,,,114,114,,,,,,114,,114,,114,114,,114,114,114,,114,114,,,,,114',
'114,,,114,,,114,114,,,,,,,114,,,,,,114,,,114,114,114,,114,114,,,,114',
'114,114,114,114,114,114,114,114,,,114,115,115,114,,115,115,,115,,,,',
',,,,,,,,,,,,115,115,,,,,,115,,115,,115,115,,115,115,115,,115,115,,,',
',115,115,,,115,,,115,115,,,,,,,115,,,,,,115,,,,115,115,,115,115,,,,115',
'115,115,115,115,115,115,115,115,,,115,119,119,115,,119,119,,119,,,,',
',,,,,,,,,,,,119,119,,,,,,119,,119,,119,119,,119,119,119,,119,119,,,',
',119,119,,,119,,,119,119,,,,,,,119,,,,,,119,,,,119,119,,119,119,,,,119',
'119,119,119,119,119,119,119,119,,,119,120,120,119,,120,120,,120,,,,',
',,,,,,,,,,,,120,120,,,,,,120,,120,,120,120,,120,120,120,,120,120,,,',
',120,120,,,120,,,120,120,,,,,,,120,,,,,,120,,,,120,120,,120,120,,,,120',
'120,120,120,120,120,120,120,120,,,120,123,123,120,,123,123,,123,,,,',
',,,,,,,,,,,,123,123,,,,,,123,,123,,123,123,,123,123,123,,123,123,,,',
',123,123,,,123,,,123,123,,,,,,,123,,,,,,123,,,,123,123,,123,123,,,,123',
'123,123,123,123,123,123,123,123,,,123,153,153,123,,153,153,,153,,,,',
',,,,,,,,,,,,153,153,153,,,,,153,,153,,153,153,,153,153,153,,153,153',
'153,153,,,153,153,,,153,,,153,153,,,,,,,153,,,,,,153,,,,153,153,,153',
'153,,,,153,153,153,153,153,153,153,153,153,,,153,161,161,153,,161,161',
',161,161,,,,,,,,,,,,,,,,161,161,,,,,,161,,161,,161,161,,161,161,161',
',161,161,161,161,,,161,161,,,161,,,161,161,,,,,,,161,,,,,,161,,,,161',
'161,,161,161,,,,161,161,161,161,161,161,161,161,161,,,161,195,195,161',
',195,195,,195,,,,,,,,,,,,,,,,,195,195,,,,,,195,,195,,195,195,,195,195',
'195,,195,195,195,195,,,195,195,,,195,,,195,195,,,,,,,195,,,,,,195,,',
',195,195,,195,195,,,,195,195,195,195,195,195,195,195,195,,,195,198,198',
'195,,198,198,,198,198,,,,,,,,,,,,,,,,198,198,,,,,,198,,198,,198,198',
',198,198,198,,198,198,198,198,,,198,198,,,198,,,198,198,,,,,,,198,,',
',,,198,,,,198,198,,198,198,,,,198,198,198,198,198,198,198,198,198,198',
'198,198,211,211,198,,211,211,,211,,,211,,,,,,,,,,,,,,211,211,,,,,,211',
',211,,211,211,,211,211,211,,211,211,,,,,211,211,,,211,,,211,211,,,,',
',,211,,,,,,211,,,,211,211,,211,211,,,,211,211,211,211,211,211,211,211',
'211,,,211,216,216,211,,216,216,,216,,,,,,,,,,,,,,,,,216,216,,,,,,216',
',216,,216,216,,216,216,216,,216,216,,,,,216,216,,,216,,,216,216,,,,',
',,216,,,,,,216,,,,216,216,,216,216,,,,216,216,216,216,216,216,216,216',
'216,,,216,217,217,216,,217,217,,217,,,,,,,,,,,,,,,,,217,217,,,,,,217',
',217,,217,217,,217,217,217,,217,217,,,,,217,217,,,217,,,217,217,,,,',
',,217,,,,,,217,,,,217,217,,217,217,,,,217,217,217,217,217,217,217,217',
'217,,,217,218,218,217,,218,218,,218,,,,,,,,,,,,,,,,,218,218,,,,,,218',
',218,,218,218,,218,218,218,,218,218,,,,,218,218,,,218,,,218,218,,,,',
',,218,,,,,,218,,,,218,218,,218,218,,,,218,218,218,218,218,218,218,218',
'218,,,218,261,261,218,,261,261,,261,,,,,,,,,,,,,,,,,261,261,,,,,,261',
',261,,261,261,,261,261,261,,261,261,,,,,261,261,,,261,,,261,261,,,,',
',,261,,,,,,261,,,,261,261,,261,261,,,,261,261,261,261,261,261,261,261',
'261,,,261,281,281,261,,281,281,,281,,,,,,,,,,,,,,,,,281,281,,,,,,281',
',281,,281,281,,281,281,281,,281,281,281,281,,,281,281,,,281,,,281,281',
',,,,,,281,,,,,,281,,,,281,281,,281,281,,,,281,281,281,281,281,281,281',
'281,281,,,281,284,284,281,,284,284,,284,,,,,,,,,,,,,,,,,284,284,,,,',
',284,,284,,284,284,,284,284,284,,284,284,,,,,284,284,,,284,,,284,284',
',,,,,,284,,,,,,284,,,,284,284,,284,284,,,,284,284,284,284,284,284,284',
'284,284,,,284,285,285,284,,285,285,,285,,,,,,,,,,,,,,,,,285,285,,,,',
',285,,285,,285,285,,285,285,285,,285,285,,,,,285,285,,,285,,,285,285',
',,,,,,285,,,,,,285,,,,285,285,,285,285,,,,285,285,285,285,285,285,285',
'285,285,,,285,286,286,285,,286,286,,286,,,,,,,,,,,,,,,,,286,286,,,,',
',286,,286,,286,286,,286,286,286,,286,286,286,286,,,286,286,,,286,,,286',
'286,,,,,,,286,,,,,,286,,,,286,286,,286,286,,,,286,286,286,286,286,286',
'286,286,286,,,286,304,304,286,,304,304,,304,304,,,,,,,,,,,,,,,,304,304',
',,,,,304,,304,,304,304,,304,304,304,,304,304,304,304,,,304,304,,,304',
',,304,304,,,,,,,304,,,,,,304,,,,304,304,,304,304,,,,304,304,304,304',
'304,304,304,304,304,,,304,305,305,304,,305,305,,305,305,,,,,,,,,,,,',
',,,305,305,,,,,,305,,305,,305,305,,305,305,305,,305,305,305,305,,,305',
'305,,,305,,,305,305,,,,,,,305,,,,,,305,,,,305,305,,305,305,,,,305,305',
'305,305,305,305,305,305,305,,,305,306,306,305,,306,306,,306,,,,,,,,',
',,,,,,,,306,306,,,,,,306,,306,,306,306,,306,306,306,,306,306,,,,,306',
'306,,,306,,,306,306,,,,,,,306,,,,,,306,,,,306,306,,306,306,,,,306,306',
'306,306,306,306,306,306,306,,,306,317,317,306,,317,317,,317,,,,,,,,',
',,,,,,,,317,317,,,,,,317,,317,,317,317,,317,317,317,,317,317,317,317',
',,317,317,,,317,,,317,317,,,,,,,317,,,,,,317,,,,317,317,,317,317,,,',
'317,317,317,317,317,317,317,317,317,317,317,317,320,320,317,,320,320',
',320,320,,,,,,,,,,,,,,,,320,320,,,,,,320,,320,,320,320,,320,320,320',
',320,320,320,320,,,320,320,,,320,,,320,320,,,,,,,320,,,,,,320,,,,320',
'320,,320,320,,,,320,320,320,320,320,320,320,320,320,320,320,320,321',
'321,320,,321,321,,321,,,,,,,,,,,,,,,,,321,321,,,,,,321,,321,,321,321',
',321,321,321,,321,321,321,321,,,321,321,,,321,,,321,321,,,,,,,321,,',
',,,321,,,,321,321,,321,321,,,,321,321,321,321,321,321,321,321,321,321',
'321,321,326,326,321,,326,326,,326,,,,,,,,,,,,,,,,,326,326,,,,,,326,',
'326,,326,326,,326,326,326,,326,326,326,326,,,326,326,,,326,,,326,326',
',,,,,,326,,,,,,326,,,,326,326,,326,326,,,,326,326,326,326,326,326,326',
'326,326,,,326,341,341,326,,341,341,,341,,,,,,,,,,,,,,,,,341,341,,,,',
',341,,341,,341,341,,341,341,341,,341,341,,,,,341,341,,,341,,,341,341',
',,,,,,341,,,,,,341,,,,341,341,,341,341,,,,341,341,341,341,341,341,341',
'341,341,,,341,342,342,341,,342,342,,342,,,,,,,,,,,,,,,,,342,342,,,,',
',342,,342,,342,342,,342,342,342,,342,342,,,,,342,342,,,342,,,342,342',
',,,,,,342,,,,,,342,,,,342,342,,342,342,,,,342,342,342,342,342,342,342',
'342,342,,,342,343,343,342,,343,343,,343,,,,,,,,,,,,,,,,,343,343,,,,',
',343,,343,,343,343,,343,343,343,,343,343,,,,,343,343,,,343,,,343,343',
',,,,,,343,,,,,,343,,,,343,343,,343,343,,,,343,343,343,343,343,343,343',
'343,343,,,343,344,344,343,,344,344,,344,,,,,,,,,,,,,,,,,344,344,,,,',
',344,,344,,344,344,,344,344,344,,344,344,,,,,344,344,,,344,,,344,344',
',,,,,,344,,,,,,344,,,,344,344,,344,344,,,,344,344,344,344,344,344,344',
'344,344,,,344,348,348,344,,348,348,,348,,,,,,,,,,,,,,,,,348,348,,,,',
',348,,348,,348,348,,348,348,348,,348,348,,,,,348,348,,,348,,,348,348',
',,,,,,348,,,,,,348,,,,348,348,,348,348,,,,348,348,348,348,348,348,348',
'348,348,,,348,372,372,348,,372,372,,372,,,,,,,,,,,,,,,,,372,372,,,,',
',372,,372,,372,372,,372,372,372,,372,372,,,,,372,372,,,372,,,372,372',
',,,,,,372,,,,,,372,,,,372,372,,372,372,,,,372,372,372,372,372,372,372',
'372,372,,,372,389,389,372,,389,389,,389,389,,,,,,,,,,,,,,,,389,389,',
',,,,389,,389,,389,389,,389,389,389,,389,389,389,389,,,389,389,,,389',
',,389,389,,,,,,,389,,,,,,389,,,,389,389,,389,389,,,,389,389,389,389',
'389,389,389,389,389,,,389,393,393,389,,393,393,,393,,,,,,,,,,,,,,,,',
'393,393,,,,,,393,,393,,393,393,,393,393,393,,393,393,,,,,393,393,,,393',
',,393,393,,,,,,,393,,,,,,393,,,,393,393,,393,393,,,,393,393,393,393',
'393,393,393,393,393,,,393,396,396,393,,396,396,,396,,,,,,,,,,,,,,,,',
'396,396,,,,,,396,,396,,396,396,,396,396,396,,396,396,396,396,,,396,396',
',,396,,,396,396,,,,,,,396,,,,,,396,,,,396,396,,396,396,,,,396,396,396',
'396,396,396,396,396,396,,,396,403,403,396,,403,403,,403,403,,,,,,,,',
',,,,,,,403,403,,,,,,403,,403,,403,403,,403,403,403,,403,403,,,,,403',
'403,,,403,,,403,403,,,,,,,403,,,,,,403,,,,403,403,,403,403,,,,403,403',
'403,403,403,403,403,403,403,,,403,405,405,403,,405,405,,405,,,,,,,,',
',,,,,,,,405,405,,,,,,405,,405,,405,405,,405,405,405,,405,405,405,405',
',,405,405,,,405,,,405,405,,,,,,,405,,,,,,405,,,,405,405,,405,405,,,',
'405,405,405,405,405,405,405,405,405,,,405,406,406,405,,406,406,,406',
',,,,,,,,,,,,,,,,406,406,,,,,,406,,406,,406,406,,406,406,406,,406,406',
'406,406,,,406,406,,,406,,,406,406,,,,,,,406,,,,,,406,,,,406,406,,406',
'406,,,,406,406,406,406,406,406,406,406,406,,,406,432,432,406,,432,432',
',432,,,,,,,,,,,,,,,,,432,432,,,,,,432,,432,,432,432,,432,432,432,,432',
'432,,,,,432,432,,,432,,,432,432,,,,,,,432,,,,,,432,,,,432,432,,432,432',
',,,432,432,432,432,432,432,432,432,432,,,432,439,439,432,,439,439,,439',
',,,,,,,,,,,,,,,,439,439,,,,,,439,,439,,439,439,,439,439,439,,439,439',
'439,439,,,439,439,,,439,,,439,439,,,,,,,439,,,,,,439,,,,439,439,,439',
'439,,,,439,439,439,439,439,439,439,439,439,,,439,447,447,439,,447,447',
',447,,,,,,,,,,,,,,,,,447,447,,,,,,447,,447,,447,447,,447,447,447,,447',
'447,,,,,447,447,,,447,,,447,447,,,,,,,447,,,,,,447,,,,447,447,,447,447',
',,,447,447,447,447,447,447,447,447,447,,,447,450,450,447,,450,450,,450',
',,,,,,,,,,,,,,,,450,450,,,,,,450,,450,,450,450,,450,450,450,,450,450',
'450,450,,,450,450,,,450,,,450,450,,,,,,,450,,,,,,450,,,,450,450,,450',
'450,,,,450,450,450,450,450,450,450,450,450,,,450,453,453,450,,453,453',
',453,,,,,,,,,,,,,,,,,453,453,,,,,,453,,453,,453,453,,453,453,453,,453',
'453,,,,,453,453,,,453,,,453,453,,,,,,,453,,,,,,453,,,,453,453,,453,453',
',,,453,453,453,453,453,453,453,453,453,,,453,459,459,453,,459,459,,459',
',,,,,,,,,,,,,,,,459,459,,,,,,459,,459,,459,459,,459,459,459,,459,459',
',,,,459,459,,,459,,,459,459,,,,,,,459,,,,,,459,,,,459,459,,459,459,',
',,459,459,459,459,459,459,459,459,459,,,459,472,472,459,,472,472,,472',
'472,,,,,,,,,,,,,,,,472,472,,,,,,472,,472,,472,472,,472,472,472,,472',
'472,472,472,,,472,472,,,472,,,472,472,,,,,,,472,,,,,,472,,,,472,472',
',472,472,,,,472,472,472,472,472,472,472,472,472,,,472,474,474,472,,474',
'474,,474,,,,,,,,,,,,,,,,,474,474,,,,,,474,,474,,474,474,,474,474,474',
',474,474,474,474,,,474,474,,,474,,,474,474,,,,,,,474,,,,,,474,,,,474',
'474,,474,474,,,,474,474,474,474,474,474,474,474,474,,,474,492,492,474',
',492,492,,492,492,,,,,,,,,,,,,,,,492,492,,,,,,492,,492,,492,492,,492',
'492,492,,492,492,492,492,,,492,492,,,492,,,492,492,,,,,,,492,,,,,,492',
',,,492,492,,492,492,,,,492,492,492,492,492,492,492,492,492,,,492,494',
'494,492,,494,494,,494,494,,,,,,,,,,,,,,,,494,494,,,,,,494,,494,,494',
'494,,494,494,494,,494,494,494,494,,,494,494,,,494,,,494,494,,,,,,,494',
',,,,,494,,,,494,494,,494,494,,,,494,494,494,494,494,494,494,494,494',
',,494,495,495,494,,495,495,,495,,,,,,,,,,,,,,,,,495,495,,,,,,495,,495',
',495,495,,495,495,495,,495,495,495,495,,,495,495,,,495,,,495,495,,,',
',,,495,,,,,,495,,,,495,495,,495,495,,,,495,495,495,495,495,495,495,495',
'495,,,495,503,503,495,,503,503,,503,,,,,,,,,,,,,,,,,503,503,,,,,,503',
',503,,503,503,,503,503,503,,503,503,,,,,503,503,,,503,,,503,503,,,,',
',,503,,,,,,503,,,,503,503,,503,503,,,,503,503,503,503,503,503,503,503',
'503,9,,503,,,503,,,,,,,9,9,9,,9,,9,,9,,9,9,9,9,,,,,,,,,,,,,,,,9,,,,9',
'9,,,9,9,9,9,9,9,,9,9,154,,154,,,9,,,,,,,154,154,154,,154,,154,,154,',
'154,154,154,154,,,,,,,,,9,,,,,,,154,,,,154,154,,,154,154,154,154,154',
'154,,154,154,156,,156,,,154,,,,,,,156,156,156,,156,,156,,156,,156,156',
'156,156,,,,,,,,,154,,,,,,,156,,,,156,156,,,156,156,156,156,156,156,',
'156,156,157,,157,,,156,,,,,,,157,157,157,,157,,157,,157,,157,157,157',
'157,,,,,,,,,156,,,,,,,157,,,,157,157,,197,157,157,157,157,157,157,,157',
'157,,,197,197,197,157,197,,197,,197,,197,197,197,197,,,,,,,,,,,,,,,',
'197,,,157,197,197,,,197,197,197,197,197,197,,197,197,,,,,,197,209,,',
',,,,,,,197,197,209,209,209,209,209,243,209,,209,,209,209,209,209,,,197',
',,243,,243,,243,,243,,,,209,,,,209,209,,,209,209,209,209,209,209,,209',
'209,243,,,244,,209,,,,,243,243,248,,,243,243,244,,244,,244,243,244,',
',248,,248,249,248,,248,,209,,,,,,,,,249,244,249,,249,,249,,243,,248',
'244,244,,,,244,244,248,248,248,248,,244,,248,248,249,,,250,,248,,,249',
'249,249,249,,,,249,249,250,,250,,250,249,250,,244,,251,,,,,,,248,,,',
',,,251,,251,250,251,,251,,,,249,250,250,250,250,250,250,,250,250,,,',
',,250,,251,,,,,,,,251,251,251,251,251,251,,251,251,252,,,,,251,,,,,250',
',,252,252,,252,253,252,,252,,252,,,,,,,,253,253,,253,251,253,,253,,253',
',252,,,,,,,,252,252,252,252,252,252,,252,252,253,,,,,252,,254,253,253',
'253,253,253,253,,253,253,,,,254,254,253,254,255,254,,254,,254,,,,,252',
',,255,255,,255,,255,,255,,255,,254,,,253,,,,,254,254,254,254,254,254',
',254,254,255,,,,,254,,256,255,255,255,255,255,255,,255,255,,,256,256',
'256,255,256,,256,,256,,256,256,256,256,,254,,,,,,,,,,,,,,256,,,255,',
',,257,256,256,256,256,256,256,,256,256,,,257,257,257,256,257,,257,,257',
',257,257,257,257,,,,,,,,,,,,,,,,257,,,256,,257,,,257,257,257,257,257',
'257,258,257,257,,,258,,,257,,,,258,258,258,,258,,258,,258,,258,258,258',
'258,,,,,,,,,,,,257,,,,258,,,,258,258,,262,258,258,258,258,258,258,,258',
'258,,,262,262,262,258,262,,262,,262,,262,262,262,262,,,,,,,,,,,,,,,',
'262,,,258,262,262,,267,262,262,262,262,262,262,,262,262,,,267,267,267',
'262,267,,267,,267,,267,267,267,267,,,,,,,,,,,,,,,,267,,,262,267,267',
',,267,267,267,267,267,267,272,267,267,,,,,,267,,,,272,272,272,272,272',
',272,,272,,272,272,272,272,,,,,,,,,,,,267,,,,272,,,,272,272,,385,272',
'272,272,272,272,272,,272,272,,,385,385,385,272,385,,385,,385,,385,385',
'385,385,,,,,,,,,,,,,,,,385,,,272,385,385,,427,385,385,385,385,385,385',
',385,385,,,427,427,427,385,427,,427,,427,,427,427,427,427,,,,,,,,,,',
',,,,,427,,,385,427,427,,428,427,427,427,427,427,427,,427,427,,,428,428',
'428,427,428,,428,,428,,428,428,428,428,,,,,,,,,,,,,,,,428,,,427,428',
'428,,429,428,428,428,428,428,428,,428,428,,,429,429,429,428,429,,429',
',429,,429,429,429,429,,,,,,,,,,,,,,,,429,,,428,429,429,,430,429,429',
'429,429,429,429,,429,429,,,430,430,430,429,430,,430,,430,,430,430,430',
'430,,,,,,,,,,,,,,,,430,,,429,430,430,,434,430,430,430,430,430,430,,430',
'430,,,434,434,434,430,434,,434,,434,,434,434,434,434,,,,,,,,,,,,,,,',
'434,,,430,434,434,,456,434,434,434,434,434,434,,434,434,,,456,456,456',
'434,456,,456,,456,,456,456,456,456,,,,,,,,,,,,,,,,456,,,434,456,456',
',,456,456,456,456,456,456,,456,456,,266,266,266,266,456,266,266,266',
',266,,266,266,,,,,,,266,266,266,,,,266,,,,,,,,456,,,,266,266,,,,,,,',
',,,,266,266,266,266,266,266,266,266,266,266,338,338,338,338,,338,338',
'338,,338,,338,338,,,,,,,338,338,338,,,,338,,,,,,,,,,,,338,338,,,,,,',
',,,,,338,338,338,338,338,338,338,338,338,338,340,340,340,340,,340,340',
'340,,340,,340,340,,,,,,,340,340,340,,,,340,,,,,,,,,,,,340,340,,,,,,',
',,,,,340,340,340,340,340,340,340,340,340,340,373,373,373,373,,373,373',
'373,,373,,373,373,,,,,,,373,373,373,,,,373,,,,,,,,,,,,373,373,,,,,,',
',,,,,373,373,373,373,373,373,373,373,373,373,381,381,381,381,,381,381',
'381,,381,,381,381,,,,,,,381,381,381,,,,381,,,,,,,,,,,,381,381,,,,,,',
',,,,,381,381,381,381,381,381,381,381,381,381,407,407,407,407,,407,407',
'407,,407,,407,407,,,,,,,407,407,407,,,,407,,,,,,,,,,,,407,407,,,,,,',
',,,,,407,407,407,407,407,407,407,407,407,407' ]
        racc_action_check = arr = ::Array.new(10470, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,    34,   nil,   nil,    91,    86,   nil,   742,   107,  8825,
   184,   277,    20,   nil,   nil,   nil,    79,   370,   463,   556,
   649,   742,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    91,   835,    -9,
    49,   100,   928,  1021,  1114,    15,   108,   121,   121,   677,
   113,   123,   140,   144,   160,   165,   173,   nil,   nil,   nil,
  1207,  1300,  1393,   nil,   nil,   nil,   nil,  1486,   nil,    67,
    75,   nil,  1579,   nil,   154,  1672,   144,  1765,  1858,  1951,
  2044,  2137,  2230,  2323,  2416,  2509,  2602,  2695,  2788,  2881,
  2974,  3067,  3160,  3253,  3346,  3439,  3532,  3625,  3718,  3811,
  3904,  3997,  4090,  4183,  4276,  4369,   nil,   -23,   152,  4462,
  4555,   155,   164,  4648,   271,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   201,   nil,   nil,  1028,   206,  1121,
  1214,   161,   164,   nil,   181,   127,   nil,   197,   193,    11,
   nil,   157,   -35,  4741,  8883,   nil,  8941,  8999,   275,   280,
   294,  4834,   207,   nil,   202,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   282,    40,   299,   218,   387,   227,   nil,   nil,
   nil,   nil,   nil,   nil,   234,   nil,   110,   nil,   nil,   238,
   nil,   325,   nil,   nil,   137,  4927,   227,  9047,  5020,   nil,
   241,   nil,   nil,   nil,   nil,   252,   267,   273,   278,  9111,
   279,  5113,    -9,    -4,    20,    41,  5206,  5299,  5392,   nil,
   nil,    60,    67,   113,   153,    -1,   392,   480,   485,   759,
   573,     4,     5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1307,   749,   935,  9128,  9172,   973,  1019,  1112,  9181,  9198,
  9242,  9266,  9324,  9341,  9389,  9406,  9454,  9502,  9557,   nil,
   nil,  5485,  9605,   298,   nil,   nil, 10077,  9653,   264,   nil,
   296,   283,  9708,   nil,   294,   nil,   288,   341,   334,   nil,
   nil,  5578,   317,   nil,  5671,  5764,  5857,   297,   341,   301,
   nil,   nil,   341,   nil,   nil,   nil,   nil,   nil,   341,   321,
   -31,   nil,     0,   nil,  5950,  6043,  6136,   350,   361,   366,
   370,   nil,   346,   852,   -28,   329,   384,  6229,   386,   nil,
  6322,  6415,   nil,   nil,   nil,   nil,  6508,   nil,   nil,   nil,
   nil,   382,   nil,   nil,   nil,   nil,   388,   391, 10137,   392,
 10197,  6601,  6694,  6787,  6880,   391,   nil,   398,  6973,   396,
   nil,   nil,   nil,   nil,   nil,   401,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   406,  7066, 10257,   408,   nil,   580,   nil,   405,   nil,
   406, 10317,   nil,   350,    88,  9756,   413,   417,   nil,  7159,
   424,   360,   -28,  7252,   nil,   nil,  7345,   nil,   423,   -24,
   426,   404,    58,  7438,   nil,  7531,  7624, 10377,   nil,   430,
   nil,   899,   nil,   nil,   431,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   371,   258,   431,   nil,   nil,  9804,  9852,  9900,
  9948,   437,  7717,   nil,  9996,   440,   nil,   nil,   438,  7810,
   nil,   nil,   nil,   424,   434,   450,   nil,  7903,   nil,   nil,
  7996,   458,   nil,  8089,   nil,   nil, 10044,    30,   nil,  8182,
   462,   439,   nil,   469,   474,   nil,   nil,   474,   nil,   nil,
   475,   474,  8275,   nil,  8368,   nil,   nil,   478,   449,   nil,
   nil,   nil,   nil,   483,   nil,   nil,   484,   485,   nil,    98,
   nil,   nil,  8461,   nil,  8554,  8647,   nil,   nil,   489,   492,
   nil,   496,   nil,  8740,   nil,   nil,   nil,   nil,   499,   nil,
   500,   nil,   501,   nil,   nil,   nil,   nil,   nil,   469,   nil,
   nil,   nil,   nil ]

racc_action_default = [
    -3,  -292,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -292,  -292,  -190,   -33,   -34,   -35,   -36,  -292,  -292,  -292,
  -292,  -292,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -84,   -85,   -86,   -87,   -88,   -89,  -292,  -292,
   -96,  -100,  -292,  -292,  -292,  -292,  -292,  -292,  -292,  -292,
  -292,  -242,  -265,  -214,  -215,  -216,  -217,  -211,  -212,  -213,
  -292,  -292,  -292,  -238,  -239,  -240,  -241,  -292,  -244,  -292,
  -257,  -260,  -292,  -266,  -292,  -292,    -7,  -292,  -292,  -292,
  -292,  -292,  -292,  -292,  -292,  -137,  -292,  -292,  -292,  -292,
  -292,  -292,  -292,  -292,  -292,  -292,  -292,  -292,  -292,  -292,
  -292,  -292,  -292,  -292,  -292,  -292,   -94,  -292,  -132,  -291,
  -291,   -22,   -23,  -292,  -291,  -156,  -183,  -184,  -185,  -186,
  -187,  -188,  -189,  -190,  -292,  -153,  -154,   -47,  -190,   -48,
   -55,  -292,  -292,   -14,  -267,   -91,   -95,  -206,  -292,  -265,
   -97,  -291,  -292,  -292,  -292,  -108,  -292,  -292,  -291,  -291,
  -292,  -292,  -267,  -167,  -169,  -170,  -171,  -172,  -173,  -175,
  -176,  -242,  -291,  -232,  -234,  -237,  -233,  -267,  -219,  -228,
  -229,  -230,  -235,  -236,  -267,  -221,  -292,  -224,  -225,  -292,
  -243,  -292,  -248,  -251,  -292,  -255,  -292,  -292,  -292,   523,
    -6,    -9,   -11,   -12,   -13,   -17,   -18,   -19,   -20,  -292,
  -267,  -292,   -87,   -88,   -89,  -285,  -278,  -284,  -272,  -138,
  -141,  -214,  -215,  -216,  -217,  -292,  -275,  -289,  -190,  -281,
  -287,  -212,  -213,  -271,  -276,  -277,  -279,  -280,  -282,  -290,
   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -44,   -45,   -46,
   -49,   -50,   -51,   -52,   -53,   -54,   -56,   -57,  -292,   -58,
  -126,  -292,   -62,  -267,  -101,  -102,  -137,  -136,  -292,  -135,
  -292,  -269,  -292,   -28,  -291,  -191,  -292,  -292,  -292,   -59,
   -60,  -268,  -292,   -93,  -292,  -292,  -255,  -292,  -292,  -292,
  -182,  -106,  -267,  -196,  -198,  -199,  -200,  -201,  -203,  -292,
  -292,  -265,  -292,   -99,  -292,  -292,  -292,  -292,  -292,  -292,
  -292,  -164,  -291,  -268,  -292,  -291,  -292,  -268,  -292,  -222,
  -292,  -292,  -245,  -246,  -247,  -249,  -292,  -252,  -253,  -254,
  -256,  -267,  -258,  -261,  -263,  -264,    -8,  -292,  -137,  -292,
  -268,  -292,  -292,  -292,  -292,  -267,  -128,  -292,  -268,  -267,
  -140,  -142,  -143,  -144,  -145,  -292,  -272,  -273,  -274,  -275,
  -278,  -281,  -283,  -284,  -285,  -286,  -287,  -288,  -289,  -133,
  -134,  -292,  -270,  -137,  -292,  -159,  -292,  -192,  -267,  -193,
  -267,  -137,   -15,   -90,  -292,  -208,  -292,  -292,  -103,  -292,
  -180,  -292,  -268,  -292,  -204,  -205,  -292,   -98,  -292,  -111,
  -292,  -117,  -292,  -292,  -121,  -291,  -291,  -137,  -163,  -292,
  -177,  -292,  -168,  -174,  -292,  -218,  -231,  -220,  -223,  -226,
  -227,  -250,  -292,  -292,  -267,   -26,  -139,  -148,  -146,  -147,
  -130,  -292,  -268,   -61,   -63,  -292,   -25,   -29,  -267,  -291,
  -160,  -161,  -162,  -292,  -292,  -267,   -92,  -292,  -207,  -209,
  -255,  -292,  -105,  -292,  -107,  -197,  -202,  -111,  -110,  -292,
  -292,  -117,  -116,  -292,  -292,  -120,  -122,  -292,  -157,  -158,
  -292,  -267,  -292,  -178,  -291,  -259,  -262,  -292,   -30,  -127,
  -129,  -131,   -27,  -292,  -194,  -195,  -292,  -292,  -104,  -292,
  -109,  -112,  -292,  -115,  -292,  -291,  -149,  -150,  -292,  -292,
  -166,  -292,   -24,   -31,  -155,  -152,  -210,  -181,  -292,  -114,
  -292,  -119,  -292,  -124,  -125,  -151,  -165,  -179,  -269,  -113,
  -118,  -123,   -32 ]

racc_goto_table = [
     2,   271,   137,   139,   140,   125,   141,   142,   167,   165,
   147,   269,   269,   263,   150,   144,   260,   181,   181,   329,
   148,   333,   190,   210,   288,   371,   292,   412,   134,   404,
    86,     1,   467,   470,   143,   121,   122,   154,   156,   157,
   268,   270,   462,   290,     3,   458,   177,   184,   158,   159,
   477,   437,   259,   172,   388,   491,   179,   179,   179,   403,
   512,   345,   426,   192,   374,   440,   483,   197,   409,   160,
   331,   413,   455,   201,   202,   203,   204,   395,   394,   419,
   209,   240,   241,   242,   243,   244,   245,   246,   247,   248,
   249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
   262,   501,   493,   490,   267,   267,   274,   327,   272,   283,
   386,   200,   328,   147,   325,   326,   205,   206,   207,   208,
   302,   324,   193,   195,   nil,   473,   466,   278,   nil,   nil,
   nil,   125,   nil,   nil,   147,   nil,   nil,   nil,   nil,   143,
   307,   308,   nil,   nil,   148,   nil,   nil,   nil,   nil,   nil,
   378,   380,   nil,   309,   315,   nil,   nil,   147,   nil,   nil,
   nil,   310,   nil,   346,   nil,   nil,   375,   159,   nil,   172,
   nil,   nil,   nil,   nil,   nil,   282,   147,   nil,   167,   165,
   nil,   nil,   384,   nil,   336,   nil,   148,   nil,   414,   nil,
   nil,   nil,   nil,   312,   349,   330,   139,   nil,   337,   nil,
   nil,   154,   156,   157,   410,   nil,   nil,   290,   316,   nil,
   nil,   nil,   nil,   nil,   nil,   318,   nil,   nil,   nil,   158,
   159,   125,   nil,   172,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   147,   147,   nil,
   nil,   339,   nil,   nil,   nil,   nil,   258,   476,   nil,   nil,
   390,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   167,   165,   416,   nil,   424,   382,   420,   262,
   385,   421,   522,   nil,   487,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   330,   nil,   nil,   nil,
   nil,   262,   nil,   nil,   347,   nil,   nil,   469,   469,   nil,
   nil,   438,   nil,   179,   398,   400,   179,   179,   nil,   445,
   nil,   nil,   192,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   391,   nil,   nil,   427,   428,   429,   430,
   nil,   469,   nil,   434,   480,   471,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   446,   nil,   nil,
   nil,   489,   nil,   147,   nil,   nil,   nil,   272,   nil,   nil,
   167,   165,   422,   nil,   nil,   nil,   469,   nil,   nil,   441,
   nil,   nil,   nil,   nil,   nil,   nil,   431,   nil,   456,   nil,
   435,   518,   382,   nil,   nil,   nil,   nil,   513,   262,   451,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   443,
   nil,   444,   nil,   nil,   nil,   nil,   nil,   258,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   434,   nil,   nil,   nil,   nil,   nil,   262,   nil,
   nil,   nil,   nil,   nil,   154,   nil,   nil,   nil,   nil,   nil,
   330,   nil,   nil,   nil,   nil,   478,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   482,
   nil,   nil,   499,   nil,   nil,   nil,   486,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   272,   nil,
   nil,   nil,   508,   nil,   510,   514,   nil,   nil,   nil,   nil,
   nil,   nil,   498 ]

racc_goto_check = [
     2,    13,    10,    10,    10,    66,     6,     6,    41,    42,
    43,    58,    58,    22,    45,     8,    59,    88,    88,    84,
    83,   101,    94,    11,    49,    14,    51,    75,    69,    56,
     5,     1,    68,    68,     6,     9,     9,    10,    10,    10,
    62,    62,    54,    58,     3,    53,    85,    85,    66,    66,
    12,    16,    21,    66,    50,    52,     6,     6,     6,    55,
    57,    60,    63,     6,    71,    72,    68,    10,    74,    69,
    51,    77,    78,     6,     6,     6,     6,    79,    81,    87,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    68,    54,    53,    10,    10,    67,    90,    10,    45,
    84,     5,    91,    43,    95,    96,     9,     9,     9,     9,
     8,    98,    99,   100,   nil,    75,    56,    66,   nil,   nil,
   nil,    66,   nil,   nil,    43,   nil,   nil,   nil,   nil,     6,
    67,    67,   nil,   nil,    83,   nil,   nil,   nil,   nil,   nil,
    51,    51,   nil,    66,    67,   nil,   nil,    43,   nil,   nil,
   nil,     2,   nil,    59,   nil,   nil,    58,    66,   nil,    66,
   nil,   nil,   nil,   nil,   nil,    15,    43,   nil,    41,    42,
   nil,   nil,    22,   nil,     6,   nil,    83,   nil,    49,   nil,
   nil,   nil,   nil,    15,    11,     2,    10,   nil,     2,   nil,
   nil,    10,    10,    10,    58,   nil,   nil,    58,    15,   nil,
   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,    66,
    66,    66,   nil,    66,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    43,   nil,
   nil,    15,   nil,   nil,   nil,   nil,    10,   101,   nil,   nil,
    43,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    41,    42,    88,   nil,    11,     6,    88,    10,
    10,    94,    14,   nil,    84,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,
   nil,    10,   nil,   nil,    15,   nil,   nil,    58,    58,   nil,
   nil,    11,   nil,     6,     2,     2,     6,     6,   nil,    11,
   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,    10,    10,    10,    10,
   nil,    58,   nil,    10,    59,    11,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,
   nil,    22,   nil,    43,   nil,   nil,   nil,    10,   nil,   nil,
    41,    42,    15,   nil,   nil,   nil,    58,   nil,   nil,    66,
   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,    10,   nil,
    15,    13,     6,   nil,   nil,   nil,   nil,    58,    10,     2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,
   nil,    15,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,    10,   nil,
   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,
     2,   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,
   nil,   nil,     2,   nil,   nil,   nil,    15,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,
   nil,   nil,     2,   nil,     2,     2,   nil,   nil,   nil,   nil,
   nil,   nil,    15 ]

racc_goto_pointer = [
   nil,    31,     0,    44,   nil,    26,   -14,   nil,   -33,    25,
   -15,   -72,  -374,  -122,  -246,    31,  -321,   nil,   nil,   nil,
   nil,   -62,  -102,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -51,   -50,   -39,   nil,   -36,   nil,   nil,   nil,  -127,
  -234,  -126,  -404,  -354,  -359,  -247,  -277,  -435,  -108,   -98,
  -200,   nil,   -79,  -278,   nil,   nil,    -7,   -18,  -373,    12,
   nil,  -210,  -311,   nil,  -244,  -286,   nil,  -243,  -320,  -223,
   nil,  -221,   nil,   -29,  -176,   -24,   nil,  -241,   -53,   nil,
   -87,   -82,   nil,   nil,   -55,   -77,   -76,   nil,   -70,    43,
    43,  -176 ]

racc_goto_default = [
   nil,   nil,   468,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   273,    13,    14,    15,
    16,   nil,   402,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    48,   nil,    50,    51,   151,   nil,
   nil,   nil,   155,   nil,   nil,   nil,   nil,   nil,   275,   nil,
   nil,   118,   nil,   219,   225,   220,    57,   nil,   nil,   nil,
   124,   nil,   nil,   162,   nil,   163,   164,   168,   293,   294,
   295,   296,   297,   300,   nil,   nil,   186,   188,   189,   180,
    73,    74,    75,    77,   nil,   nil,   nil,   191,   nil,   nil,
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 101, :_reduce_1,
  1, 101, :_reduce_2,
  0, 101, :_reduce_3,
  1, 102, :_reduce_4,
  1, 104, :_reduce_5,
  3, 104, :_reduce_6,
  2, 104, :_reduce_7,
  1, 105, :_reduce_8,
  3, 105, :_reduce_9,
  1, 106, :_reduce_none,
  3, 106, :_reduce_11,
  3, 106, :_reduce_12,
  3, 106, :_reduce_13,
  1, 108, :_reduce_14,
  3, 108, :_reduce_15,
  1, 107, :_reduce_none,
  3, 107, :_reduce_17,
  3, 107, :_reduce_18,
  3, 107, :_reduce_19,
  3, 107, :_reduce_20,
  1, 109, :_reduce_none,
  2, 109, :_reduce_22,
  2, 109, :_reduce_23,
  7, 109, :_reduce_24,
  5, 109, :_reduce_25,
  5, 109, :_reduce_26,
  4, 116, :_reduce_27,
  1, 113, :_reduce_28,
  3, 113, :_reduce_29,
  1, 112, :_reduce_30,
  2, 112, :_reduce_31,
  4, 112, :_reduce_32,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  3, 110, :_reduce_37,
  3, 110, :_reduce_38,
  3, 110, :_reduce_39,
  3, 110, :_reduce_40,
  3, 110, :_reduce_41,
  3, 110, :_reduce_42,
  3, 110, :_reduce_43,
  3, 110, :_reduce_44,
  3, 110, :_reduce_45,
  3, 110, :_reduce_46,
  2, 110, :_reduce_47,
  2, 110, :_reduce_48,
  3, 110, :_reduce_49,
  3, 110, :_reduce_50,
  3, 110, :_reduce_51,
  3, 110, :_reduce_52,
  3, 110, :_reduce_53,
  3, 110, :_reduce_54,
  2, 110, :_reduce_55,
  3, 110, :_reduce_56,
  3, 110, :_reduce_57,
  3, 110, :_reduce_58,
  3, 110, :_reduce_59,
  3, 110, :_reduce_60,
  5, 120, :_reduce_61,
  1, 122, :_reduce_62,
  3, 122, :_reduce_63,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_85,
  1, 117, :_reduce_86,
  1, 117, :_reduce_87,
  1, 117, :_reduce_88,
  1, 117, :_reduce_89,
  4, 119, :_reduce_90,
  2, 119, :_reduce_91,
  5, 119, :_reduce_92,
  3, 119, :_reduce_93,
  2, 144, :_reduce_94,
  2, 144, :_reduce_95,
  1, 124, :_reduce_96,
  2, 124, :_reduce_97,
  4, 146, :_reduce_98,
  3, 146, :_reduce_99,
  1, 146, :_reduce_100,
  3, 147, :_reduce_101,
  3, 147, :_reduce_102,
  3, 145, :_reduce_103,
  3, 150, :_reduce_104,
  2, 150, :_reduce_105,
  2, 148, :_reduce_106,
  4, 148, :_reduce_107,
  2, 127, :_reduce_108,
  5, 152, :_reduce_109,
  4, 152, :_reduce_110,
  0, 153, :_reduce_none,
  2, 153, :_reduce_112,
  4, 153, :_reduce_113,
  3, 153, :_reduce_114,
  6, 128, :_reduce_115,
  5, 128, :_reduce_116,
  0, 154, :_reduce_none,
  4, 154, :_reduce_118,
  3, 154, :_reduce_119,
  5, 126, :_reduce_120,
  1, 155, :_reduce_121,
  2, 155, :_reduce_122,
  5, 156, :_reduce_123,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 121, :_reduce_none,
  4, 121, :_reduce_127,
  1, 160, :_reduce_128,
  3, 160, :_reduce_129,
  3, 159, :_reduce_130,
  6, 125, :_reduce_131,
  2, 125, :_reduce_132,
  3, 161, :_reduce_133,
  3, 161, :_reduce_134,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  0, 111, :_reduce_137,
  1, 111, :_reduce_138,
  3, 111, :_reduce_139,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  3, 163, :_reduce_146,
  3, 163, :_reduce_147,
  3, 163, :_reduce_148,
  6, 129, :_reduce_149,
  6, 130, :_reduce_150,
  7, 118, :_reduce_151,
  7, 118, :_reduce_152,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  7, 131, :_reduce_155,
  1, 170, :_reduce_156,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 171, :_reduce_none,
  2, 171, :_reduce_160,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  4, 133, :_reduce_163,
  3, 133, :_reduce_164,
  7, 132, :_reduce_165,
  6, 132, :_reduce_166,
  1, 173, :_reduce_167,
  3, 173, :_reduce_168,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_171,
  1, 175, :_reduce_none,
  1, 176, :_reduce_173,
  3, 176, :_reduce_174,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 174, :_reduce_none,
  2, 174, :_reduce_178,
  7, 135, :_reduce_179,
  2, 149, :_reduce_180,
  5, 149, :_reduce_181,
  1, 149, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_190,
  1, 167, :_reduce_191,
  2, 167, :_reduce_192,
  2, 167, :_reduce_193,
  4, 167, :_reduce_194,
  4, 167, :_reduce_195,
  1, 151, :_reduce_196,
  3, 151, :_reduce_197,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  3, 181, :_reduce_202,
  1, 181, :_reduce_203,
  2, 182, :_reduce_204,
  2, 180, :_reduce_205,
  1, 183, :_reduce_206,
  4, 183, :_reduce_207,
  4, 136, :_reduce_208,
  5, 137, :_reduce_209,
  7, 137, :_reduce_210,
  1, 123, :_reduce_211,
  1, 138, :_reduce_212,
  1, 138, :_reduce_213,
  1, 138, :_reduce_214,
  1, 138, :_reduce_215,
  1, 138, :_reduce_216,
  1, 138, :_reduce_217,
  4, 139, :_reduce_218,
  2, 139, :_reduce_219,
  4, 139, :_reduce_220,
  2, 139, :_reduce_221,
  3, 140, :_reduce_222,
  4, 140, :_reduce_223,
  2, 140, :_reduce_224,
  1, 186, :_reduce_225,
  3, 186, :_reduce_226,
  3, 187, :_reduce_227,
  1, 188, :_reduce_none,
  1, 188, :_reduce_229,
  1, 185, :_reduce_230,
  3, 185, :_reduce_231,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 190, :_reduce_241,
  1, 190, :_reduce_242,
  2, 191, :_reduce_243,
  1, 193, :_reduce_244,
  1, 195, :_reduce_245,
  1, 196, :_reduce_246,
  2, 194, :_reduce_247,
  1, 197, :_reduce_248,
  1, 198, :_reduce_249,
  2, 198, :_reduce_250,
  2, 192, :_reduce_251,
  2, 199, :_reduce_252,
  2, 199, :_reduce_253,
  3, 103, :_reduce_254,
  0, 184, :_reduce_none,
  1, 184, :_reduce_none,
  0, 200, :_reduce_257,
  2, 200, :_reduce_258,
  4, 200, :_reduce_259,
  1, 134, :_reduce_260,
  3, 134, :_reduce_261,
  5, 134, :_reduce_262,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 143, :_reduce_265,
  1, 141, :_reduce_266,
  0, 115, :_reduce_none,
  1, 115, :_reduce_268,
  0, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  0, 158, :_reduce_291 ]

racc_reduce_n = 292

racc_shift_n = 523

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :WSLPAREN => 26,
  :LPAREN => 27,
  :RPAREN => 28,
  :ISEQUAL => 29,
  :GREATEREQUAL => 30,
  :GREATERTHAN => 31,
  :LESSTHAN => 32,
  :IF => 33,
  :ELSE => 34,
  :DEFINE => 35,
  :ELSIF => 36,
  :VARIABLE => 37,
  :CLASS => 38,
  :INHERITS => 39,
  :NODE => 40,
  :BOOLEAN => 41,
  :NAME => 42,
  :SEMIC => 43,
  :CASE => 44,
  :DEFAULT => 45,
  :AT => 46,
  :ATAT => 47,
  :LCOLLECT => 48,
  :RCOLLECT => 49,
  :CLASSREF => 50,
  :NOT => 51,
  :OR => 52,
  :AND => 53,
  :UNDEF => 54,
  :PARROW => 55,
  :PLUS => 56,
  :MINUS => 57,
  :TIMES => 58,
  :DIV => 59,
  :LSHIFT => 60,
  :RSHIFT => 61,
  :UMINUS => 62,
  :MATCH => 63,
  :NOMATCH => 64,
  :REGEX => 65,
  :IN_EDGE => 66,
  :OUT_EDGE => 67,
  :IN_EDGE_SUB => 68,
  :OUT_EDGE_SUB => 69,
  :IN => 70,
  :UNLESS => 71,
  :PIPE => 72,
  :LAMBDA => 73,
  :SELBRACE => 74,
  :NUMBER => 75,
  :HEREDOC => 76,
  :SUBLOCATE => 77,
  :RENDER_STRING => 78,
  :RENDER_EXPR => 79,
  :EPP_START => 80,
  :EPP_END => 81,
  :EPP_END_TRIM => 82,
  :FUNCTION => 83,
  :TYPE => 84,
  :PRIVATE => 85,
  :ATTR => 86,
  :APPLICATION_R => 87,
  :CONSUMES_R => 88,
  :PRODUCES_R => 89,
  :SITE_R => 90,
  :APPLICATION => 91,
  :PRODUCES => 92,
  :CONSUMES => 93,
  :SITE => 94,
  :LOW => 95,
  :HIGH => 96,
  :LISTSTART => 97,
  :SPLAT => 98,
  :MODULO => 99 }

racc_nt_base = 100

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "WSLPAREN",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "TYPE",
  "PRIVATE",
  "ATTR",
  "APPLICATION_R",
  "CONSUMES_R",
  "PRODUCES_R",
  "SITE_R",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "SITE",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "capability_mapping",
  "call_function_expression",
  "bracketed_expression",
  "selector_entries",
  "expressions",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "node_definition_expression",
  "site_definition_expression",
  "epp_render_expression",
  "function_definition",
  "type_alias",
  "type_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "call_function_start",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "opt_return_type",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "capability_kw",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "optional_statements",
  "collection_entries",
  "hashpairs",
  "hashpair",
  "collection_entry",
  "collection_entry_keyword",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 129)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 140)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 147)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 156)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2], val[1], val[4])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 182)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_37(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_38(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_39(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_40(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_41(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_42(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_43(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_44(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_45(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_46(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_47(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_48(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_49(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_50(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_51(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_52(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_53(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_54(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_55(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_56(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_57(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_58(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 221)
  def _reduce_59(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 222)
  def _reduce_60(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 225)
  def _reduce_61(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_62(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 235)
  def _reduce_63(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

module_eval(<<'.,.,', 'egrammar.ra', 261)
  def _reduce_85(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 262)
  def _reduce_86(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 263)
  def _reduce_87(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_88(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 265)
  def _reduce_89(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 274)
  def _reduce_90(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 278)
  def _reduce_91(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 282)
  def _reduce_92(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[4]
      result.lambda = val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_93(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_94(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 294)
  def _reduce_95(val, _values, result)
     result = Factory.QNAME(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_96(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 300)
  def _reduce_97(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_98(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 304)
  def _reduce_99(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 305)
  def _reduce_100(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_101(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_102(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 321)
  def _reduce_103(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[2][:value], val[1])
      loc result, val[0][:start], val[2][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_104(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 327)
  def _reduce_105(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 331)
  def _reduce_106(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 332)
  def _reduce_107(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_108(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 347)
  def _reduce_109(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 351)
  def _reduce_110(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 111 omitted

module_eval(<<'.,.,', 'egrammar.ra', 359)
  def _reduce_112(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 363)
  def _reduce_113(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 367)
  def _reduce_114(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 374)
  def _reduce_115(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 378)
  def _reduce_116(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 117 omitted

module_eval(<<'.,.,', 'egrammar.ra', 388)
  def _reduce_118(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 392)
  def _reduce_119(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 399)
  def _reduce_120(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 405)
  def _reduce_121(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 406)
  def _reduce_122(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 411)
  def _reduce_123(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 427)
  def _reduce_127(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 432)
  def _reduce_128(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_129(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_130(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 448)
  def _reduce_131(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 452)
  def _reduce_132(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 457)
  def _reduce_133(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 458)
  def _reduce_134(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_137(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 468)
  def _reduce_138(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 469)
  def _reduce_139(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'egrammar.ra', 488)
  def _reduce_146(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 492)
  def _reduce_147(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 496)
  def _reduce_148(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 505)
  def _reduce_149(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 516)
  def _reduce_150(val, _values, result)
        result = add_definition(Factory.APPLICATION(classname(val[1][:value]), val[2], val[4]))
    loc result, val[0], val[5]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 522)
  def _reduce_151(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        Factory.QNAME(classname(val[0][:value])),
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 529)
  def _reduce_152(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        val[0],
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

# reduce 153 omitted

# reduce 154 omitted

module_eval(<<'.,.,', 'egrammar.ra', 546)
  def _reduce_155(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 556)
  def _reduce_156(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

module_eval(<<'.,.,', 'egrammar.ra', 565)
  def _reduce_160(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 161 omitted

# reduce 162 omitted

module_eval(<<'.,.,', 'egrammar.ra', 582)
  def _reduce_163(val, _values, result)
        result = add_definition(Factory.SITE(val[2]))
    loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 586)
  def _reduce_164(val, _values, result)
        result = add_definition(Factory.SITE(nil))
    loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_165(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 600)
  def _reduce_166(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 610)
  def _reduce_167(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 611)
  def _reduce_168(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 169 omitted

# reduce 170 omitted

module_eval(<<'.,.,', 'egrammar.ra', 618)
  def _reduce_171(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 172 omitted

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_173(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 623)
  def _reduce_174(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

module_eval(<<'.,.,', 'egrammar.ra', 632)
  def _reduce_178(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_179(val, _values, result)
          result = add_definition(Factory.FUNCTION(val[1][:value], val[2], val[5], val[3]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_180(val, _values, result)
     result = val[1] ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_181(val, _values, result)
     result = val[1][*val[3]] ; loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_190(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_191(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_192(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_193(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_194(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_195(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_196(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_197(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_202(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_203(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_204(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_205(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 693)
  def _reduce_206(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_207(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_208(val, _values, result)
          result = add_definition(Factory.TYPE_ASSIGNMENT(val[1], val[3]))
      loc(result, val[0], val[3])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_209(val, _values, result)
            result = add_definition(Factory.TYPE_DEFINITION(val[1][:value], nil, val[3]))
        loc(result, val[0], val[4])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 711)
  def _reduce_210(val, _values, result)
            result = add_definition(Factory.TYPE_DEFINITION(val[1][:value], val[3][:value], val[5]))
        loc(result, val[0], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 718)
  def _reduce_211(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 723)
  def _reduce_212(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 724)
  def _reduce_213(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 725)
  def _reduce_214(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 726)
  def _reduce_215(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 727)
  def _reduce_216(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 728)
  def _reduce_217(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 734)
  def _reduce_218(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 735)
  def _reduce_219(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 736)
  def _reduce_220(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 737)
  def _reduce_221(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 740)
  def _reduce_222(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 741)
  def _reduce_223(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 742)
  def _reduce_224(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 745)
  def _reduce_225(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 746)
  def _reduce_226(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 749)
  def _reduce_227(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 228 omitted

module_eval(<<'.,.,', 'egrammar.ra', 753)
  def _reduce_229(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 756)
  def _reduce_230(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 757)
  def _reduce_231(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

module_eval(<<'.,.,', 'egrammar.ra', 774)
  def _reduce_241(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 775)
  def _reduce_242(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 777)
  def _reduce_243(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 778)
  def _reduce_244(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 779)
  def _reduce_245(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 780)
  def _reduce_246(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 781)
  def _reduce_247(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 782)
  def _reduce_248(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 785)
  def _reduce_249(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 786)
  def _reduce_250(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 789)
  def _reduce_251(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 792)
  def _reduce_252(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 793)
  def _reduce_253(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 796)
  def _reduce_254(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 255 omitted

# reduce 256 omitted

module_eval(<<'.,.,', 'egrammar.ra', 803)
  def _reduce_257(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 804)
  def _reduce_258(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 805)
  def _reduce_259(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 808)
  def _reduce_260(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 809)
  def _reduce_261(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 810)
  def _reduce_262(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 263 omitted

# reduce 264 omitted

module_eval(<<'.,.,', 'egrammar.ra', 816)
  def _reduce_265(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 819)
  def _reduce_266(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 267 omitted

module_eval(<<'.,.,', 'egrammar.ra', 825)
  def _reduce_268(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

module_eval(<<'.,.,', 'egrammar.ra', 854)
  def _reduce_291(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
